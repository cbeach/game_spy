# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import deep_thought_pb2 as deep__thought__pb2


class EmulatorStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.play_game = channel.stream_stream(
        '/org.beachc.deep_thought.Emulator/play_game',
        request_serializer=deep__thought__pb2.MachineState.SerializeToString,
        response_deserializer=deep__thought__pb2.VideoFrame.FromString,
        )


class EmulatorServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def play_game(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_EmulatorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'play_game': grpc.stream_stream_rpc_method_handler(
          servicer.play_game,
          request_deserializer=deep__thought__pb2.MachineState.FromString,
          response_serializer=deep__thought__pb2.VideoFrame.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'org.beachc.deep_thought.Emulator', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
